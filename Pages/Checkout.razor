@page "/checkout"
@using BlazingPizza.Services
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model="Order.DeliveryAddress" OnValidSubmit="PlaceOrder" OnInvalidSubmit="Showerror">


        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review Order</h4>
                <OrderReview Order="Order"></OrderReview>

            </div>
            <div class="checkout-delivery-address">
                <h4> Deliver to ...</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">Please enter a name and address</div>
                }
                <AddressEditor Address="Order.DeliveryAddress"></AddressEditor>
            </div>
        </div>
        <button class="checkout-button btn btn-warning" disabled=@isSubmitting>Place Order</button>
        <ValidationSummary/>
        <DataAnnotationsValidator/>
    </EditForm>
</div>
@code {
    Order Order => OrderState.Order;
    bool isSubmitting;
    bool isError = false;

    async Task PlaceOrder()
    {
        isError = false;
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var neworderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{neworderId}");
    }

    private async Task CheckSubmission(EditContext editContext)
    {
        isSubmitting = true;
        var model = editContext.Model as Address;
        isError = string.IsNullOrWhiteSpace(model?.Name) ||
                   string.IsNullOrWhiteSpace(model?.Line1) ||
                   string.IsNullOrWhiteSpace(model?.City) ||
                   string.IsNullOrWhiteSpace(model?.Region) ||
                   string.IsNullOrWhiteSpace(model?.PostalCode);
        if (!isError)
            await PlaceOrder();
        isSubmitting = false;
    }
    protected void Showerror()
    {
        isError = true;
    }

}
